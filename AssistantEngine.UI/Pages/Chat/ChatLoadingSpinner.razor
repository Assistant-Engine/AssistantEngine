@using AssistantEngine.Factories
@inject ChatClientState chatClientState

@* wrap your existing markup *@
@if (Visible)
{
    <div class="loader-inner p-width">
        @if (!string.IsNullOrEmpty(Message))
        {
            <p class="spinner-message">@Message?.TrimEnd('.')</p>
        }
    <div class="lds-ellipsis">
            <div></div><div></div><div></div><div></div>
        </div>
     
    </div>

}

@code {
    [Parameter] public bool Visible { get; set; }
    [Parameter] public string? Message { get; set; }

    protected override void OnInitialized()
    {
        chatClientState.OnChatLoaderMessage += (v, m) =>
        {
            Visible = v;
            Message = m;
            InvokeAsync(StateHasChanged);
        };
    }



    // optional helper for parent via @ref
    public void Toggle(bool show, string? message = null)
    {
        Visible = show;
        Message = message;
        StateHasChanged();
    }

    [Parameter] public EventCallback<SpinnerToggleEventArgs> OnToggle { get; set; }

    public async Task ToggleAsync(bool show, string? message = null)
    {
        Visible = show;
        Message = message;

        StateHasChanged();
    }
}
