@using System.Data.SqlClient
@using AssistantEngine.Factories
@using AssistantEngine.UI.Services
@using AssistantEngine.UI.Services.Implementation.Config
@using AssistantEngine.UI.Services.Implementation.Database
@using AssistantEngine.UI.Services.Models
@using Microsoft.Extensions.AI
@inherits LayoutComponentBase
@inject IAssistantConfigStore ConfigStore;
@inject ChatClientState clientState;
@inject IDatabaseRegistry DbRegistry;
@inject IMcpRegistry McpRegistry;
@if (showSidebar) //dont neccessarily need this here currently but is good for if we want to have hide here in future maybe
{
    <aside class="chat-options-sidebar">
        <h3 class="nav-top">Assistant Options</h3>


        <section>
            <h4><i class="fi fi-br-box"></i><span class="header-text-1">Preset</span></h4>
            <dl>
                <dt>
                   
                    Name/Identifier
                </dt>
                <dd class="tokencount-op-inner">
                    <InputText @bind-Value="AssistantConfig.Id"
                                 class="form-control mot2"/>
                </dd>
                <div class="section-save-inner">
                    <button id="save-chat-options" class="btn btn-primary" @onclick="SaveChatOptions">
                        Save Model
                    </button>
                    <p class="text-muted small chat-none-1">
                        Changes take effect immediately. Click “Save Model” only to make them permanent for future sessions.
                    </p>
                </div>

            </dl>
        </section>
       <section class="model-server-section">
    <h4>
        <i class="fi fi-br-network"></i>
        <span class="header-text-1">Model Server</span>
    </h4>
    <dl>
        <dt>Provider</dt>
        <dd class="tokencount-op-inner">
            <InputSelect @bind-Value="AssistantConfig.ModelProvider" class="form-control mot2">
                <option value="Ollama">Ollama</option>
            </InputSelect>
        </dd>

        <dt>
            <i class="fi fi-br-info me-1 fs-6 align-text-bottom text-muted"
               title="Base URL of your ollama server. If you have installed locally it is likely: http://localhost:11434"></i>
            Server URL
        </dt>
        <dd class="tokencount-op-inner">
            <InputText @bind-Value="AssistantConfig.ModelProviderUrl"
                       class="form-control mot2"
                       placeholder="http://localhost:11434"
                       @onblur="EnsureProviderUrl" />
        </dd>
    </dl>
</section>

      
        <section class="model-config-section">
            <h4>
                <i class="fi fi-br-brain-lightning"></i>
                <span class="header-text-1">Model Configuration</span>
            </h4>
            <dl>
                @foreach (var model in AssistantConfig.ModelOptions)
                {
                    var item = model;  @* local copy to fix closure *@
                    <div @key="item.Key" class="model-config-block mb-4">
                        <dt class="model-label"
                            @onclick="() => ToggleModel(item.Key)"
                            style="cursor: pointer; display: flex; align-items: center;">
                            <i class="fi fi-br-info me-1 fs-6 align-text-bottom text-muted"
                               title='@(item.Key == "Embedding"
                                                                                      ? "It is not advisable to change this as it will require re-embedding vector store"
                                                                                      : "")'>
                    </i>
                    <span>@item.Label</span>
                    <i class="fi fi-br-angle-@(_expanded.Contains(item.Key) ? "up" : "down") ms-auto"></i>
                </dt>

                @if (_expanded.Contains(item.Key))
                        {
                            <dd class="tokencount-op-inner">
                           

                                <div class="chatoption-subblock mt-2 px-2">
                                    <div class="form-group mb-2">
                                        <label>
                                           
                                            Model Id
                                        </label>
                                        <ModelDropdown OnSelect="@(async selected =>
                                                                                                                             {
                                                           item.Options.ModelId = selected.Name;
                                                           await OnStateChange.InvokeAsync();
                                                       })"
                                                         SelectedModel="@item.Options.ModelId" />
                                    </div>

                                    <div class="form-group mb-2">
                                        <label>
                                            <i class="fi fi-br-info me-1 fs-6 align-text-bottom text-muted"
                                               title="Controls randomness: lower values make output more deterministic; higher values increase variability (0.0–1.0)"></i>
                                            Temperature
                                        </label>
                                        <div class="temp-op-inner">
                                            <input type="range"
                                                   @bind="item.Options.Temperature"
                                                   min="0" max="1" step="0.1"
                                                   class="form-range flex-grow-1 range-temp" />
                                            <span id="temp-option-num" class="ms-2">@item.Options.Temperature</span>
                                        </div>
                                    </div>

                                    <div class="form-group mb-2">
                                        <label>
                                            <i class="fi fi-br-info me-1 fs-6 align-text-bottom text-muted"
                                               title="Keep tokens whose cumulative probability mass ≤ this value (0.0–1.0)"></i>
                                            Top P
                                        </label>
                                        <InputNumber @bind-Value="item.Options.TopP"
                                                     class="form-control"
                                                     step="0.01"
                                                     placeholder="default" />
                                    </div>

                                    <div class="form-group mb-2">
                                        <label>
                                            <i class="fi fi-br-info me-1 fs-6 align-text-bottom text-muted"
                                               title="Keep only the highest-probability K tokens"></i>
                                            Top K
                                        </label>
                                        <InputNumber @bind-Value="item.Options.TopK"
                                                     class="form-control"
                                                     step="1"
                                                     placeholder="default" />
                                    </div>

                                    <div class="form-group mb-2">
                                        <label>
                                            <i class="fi fi-br-info me-1 fs-6 align-text-bottom text-muted"
                                               title="Maximum number of tokens the model can generate"></i>
                                            Max Output Tokens
                                        </label>
                                        <InputNumber @bind-Value="item.Options.MaxOutputTokens"
                                                     class="form-control"
                                                     placeholder="unlimited" />
                                    </div>

                                    <div class="form-group mb-2">
                                        <label>
                                            <i class="fi fi-br-info me-1 fs-6 align-text-bottom text-muted"
                                               title="Discourage new topics by penalizing new tokens once they appear"></i>
                                            Presence Penalty
                                        </label>
                                        <InputNumber @bind-Value="item.Options.PresencePenalty"
                                                     class="form-control"
                                                     step="0.1"
                                                     placeholder="0" />
                                    </div>

                                    <div class="form-group mb-2">
                                        <label>
                                            <i class="fi fi-br-info me-1 fs-6 align-text-bottom text-muted"
                                               title="Discourage repeated tokens by applying a penalty each time they appear"></i>
                                            Frequency Penalty
                                        </label>
                                        <InputNumber @bind-Value="item.Options.FrequencyPenalty"
                                                     class="form-control"
                                                     step="0.1"
                                                     placeholder="0" />
                                    </div>
                                </div>
                            </dd>
                        }
                    </div>
                }
            </dl>
        </section>


        <section>
            <h4><i class="fi fi-br-settings"></i><span class="header-text-1">Context</span></h4>
            <dl>
                <dt>
                    <i class="fi fi-br-info me-1 fs-6 align-text-bottom text-muted"
                       title="Controls randomness: lower values make output more deterministic; higher values increase variability (0.0–1.0)"></i>
                    System Prompt
                </dt>
                <dd class="d-flex align-items-center context-op-inner">
                        <InputTextArea @bind-Value="AssistantConfig.SystemPrompt"
                                   class="form-control mot2" />
                </dd>
               

            </dl>
        </section>

        <section id="ingestion-settings">
            <h4><i class="fi fi-br-folder-open"></i><span class="header-text-1">RAG / Data Ingestion</span></h4>
            <dl>
                @foreach (var folder in AssistantConfig.IngestionPaths)
                {
                    <div class="ingestion-folder">
                        <dt class="path-dt">Path: <button class="btn btn-sm btn-danger mt-2" @onclick="@(() => RemoveFolder(folder))"><i class="fi-br-cross"></i></button></dt>
                        <dd class="penalty1-op-inner">
                            <InputText @bind-Value="folder.Path" class="form-control" />
                        </dd>

                       
     

                        <dt class="ext-dt">File Extensions:</dt>
                        <dd class="penalty1-op-inner">
                            <input type="text"
                                   class="form-control"
                                   placeholder="All supported types"
                                   value="@GetExtensionsString(folder)"
                                   @onchange="@((ChangeEventArgs e) => SetExtensions(folder, e.Value?.ToString()))" />

                        </dd>
                        <div class="explore-sub-cont">
                            <dt class="explore-dt">Explore Subfolders:</dt>
                            <dd class="subexplorer">
                                <InputCheckbox @bind-Value="folder.ExploreSubFolders" class="form-check-input ms-1" />
                            </dd>
                        </div>
                        

                    </div>
                }

                <button class="btn btn-sm btn-outline-primary add-ingest-btn" @onclick="AddFolder">Add Ingestion Path</button>
                <button class="reingest-btn"
                        @onclick="@(() => ReingestDocuments())">
                    Reingest
                </button>
            </dl>
        </section>
         <section id="database-section-1">
            <h4><i class="fi fi-br-database"></i><span class="header-text-1">Database Access</span></h4>
             <dl>
                @foreach (var database in AssistantConfig.Databases)
                {
                    <div class="database-setting">
                        <dt class="name-dt">
                            Name:
                            <button class="btn btn-sm btn-danger mt-2" @onclick="@(() => RemoveDatabase(database))">
                                <i class="fi-br-cross"></i>
                            </button>
                        </dt>
                        <dd class="penalty1-op-inner">
                            <InputText @bind-Value="database.Id" class="form-control"
                                       @oninput="(_) => editedDatabases.Add(database.Id)" />
                        </dd>

                        <dt>
                            <i class="fi fi-br-info me-1 fs-6 align-text-bottom text-muted"
                               title="Database specific considerations injected when requesting information."></i>
                            Database Considerations
                        </dt>
                        <dd class="tokencount-op-inner">
                            <InputTextArea @bind-Value="database.DatabaseConsiderations" class="form-control mot2"
                                           @oninput="(_) => editedDatabases.Add(database.Id)" />
                        </dd>

                        <dt>Connection String</dt>
                        <dd class="tokencount-op-inner">
                            <InputTextArea @bind-Value="database.ConnectionString" class="form-control mot2"
                                           @oninput="(_) => editedDatabases.Add(database.Id)" />
                        </dd>

                        <dt class="ext-dt">Dialect:</dt>
                        <dd class="penalty1-op-inner">
                            <InputText @bind-Value="database.Dialect" class="form-control"
                                       @oninput="(_) => editedDatabases.Add(database.Id)" />
                        </dd>

                        <div class="describe-db">
                            <dt class="ext-dt">
                                <i class="fi fi-br-info me-1 fs-6 align-text-bottom text-muted"
                                   title="Describe database prior to ingestion"></i> Describe Database:
                            </dt>
                            <dd class="subexplorer">
                                <InputCheckbox @bind-Value="database.DescribeDatabaseWithModel" class="form-check-input ms-1"
                                               @onchange="(_) => editedDatabases.Add(database.Id)" />
                            </dd>
                        </div>

                        <button class="save-database-btn"
                                @onclick="@(() => SaveDatabase(database))"
                                style="display:@(editedDatabases.Contains(database.Id) ? "inline-block" : "none")">
                            Save
                        </button>
                        
                    </div>
                }

                <button class="btn btn-sm btn-outline-primary add-db-btn" @onclick="AddDatabase">Add Database</button>
                <button class="reingest-btn"
                        @onclick="@(() => ReingestDatabases())">
                    Reingest Database
                </button>
            </dl>
        </section>
        <section id="mcp-section">
            <h4>
                <i class="fi fi-br-network-cloud"></i>
                <span class="header-text-1">MCP Connectors</span>
            </h4>
            <dl>
                @foreach (var conn in AssistantConfig.McpConnectors)
                {
                    <div class="mcp-connector-setting">
                        <dt class="name-dt">
                            Name:
                            <button class="btn btn-sm btn-danger mt-2"
                                    @onclick="@(() => RemoveConnector(conn))">
                                <i class="fi-br-cross"></i>
                            </button>
                        </dt>
                        <dd class="penalty1-op-inner">
                            <InputText @bind-Value="conn.Id"
                                       class="form-control"
                                       @oninput="(_) => editedConnectors.Add(conn.Id)" />
                        </dd>

                        <dt>Server URL</dt>
                        <dd class="tokencount-op-inner">
                            <InputText @bind-Value="conn.ServerUrl"
                                       class="form-control mot2"
                                       placeholder="http://localhost:4001"
                                       @oninput="(_) => editedConnectors.Add(conn.Id)" />
                        </dd>

                        <dt>Auth Token (optional)</dt>
                        <dd class="tokencount-op-inner">
                            <InputText @bind-Value="conn.AuthToken"
                                       class="form-control mot2"
                                       placeholder="Bearer token or API key"
                                       @oninput="(_) => editedConnectors.Add(conn.Id)" />
                        </dd>

         
                   
                            @if (connectorTools.TryGetValue(conn.Id, out var toolNames) && toolNames.Any())
                            {
                            var modeClass = IsEditing(conn) ? "mcp-editing-on" : "mcp-editing-off";
                            <dt class="d-flex align-items-center allowed-mcp-sec">
                                <span class="me-2">Allowed Tools</span>

                                <button type="button"
                                        class="btn btn-sm btn-link p-0 m-0 text-decoration-none allow-mcp-btn"
                                        title="Edit allowed tools"
                                        @onclick="@(() => ToggleConnectorEdit(conn))">
                                    <i class="fi fi-br-pencil"></i>
                                </button>
                            </dt>

                            <dd class="penalty1-op-inner small">
                                <div class="@($"mcp-tools-wrapper {modeClass}")">
                                    <!-- VIEW MODE (badges only) -->
                                    <div class="mcp-view-mode">
                                        @if (conn.EnabledTools.Any())
                                        {
                                            @foreach (var t in conn.EnabledTools)
                                            {
                                                <span class="badge badge-1 me-1 mb-1 d-inline-block">@t</span>
                                            }
                                        }
                                        else
                                        {
                                            <div class="text-muted tiny">
                                                No tools enabled.
                                            </div>
                                        }
                                    </div>

                                    <!-- EDIT MODE (checkbox list) -->
                                    <div class="mcp-edit-mode">
                                        <div class="mcp-tools-list">
                                            @foreach (var t in toolNames)
                                            {
                                                bool enabled = conn.EnabledTools.Contains(t);
                                                <label class="form-check mcp-tool-choice d-flex align-items-center mb-1">
                                                    <input type="checkbox"
                                                           class="form-check-input me-2"
                                                           checked="@enabled"
                                                           @onchange="@((ChangeEventArgs e) => ToggleToolAllowed(conn, t, (bool)e.Value))" />
                                                    <span class="badge badge-1">@t</span>
                                                </label>
                                            }
                                        </div>
                                        <div class="text-muted tiny">
                                            Uncheck to disable a tool for this assistant.
                                        </div>
                                    </div>
                                </div>
                                </dd>

                            <button class="save-connector-btn"
                                    style="display:@(editedConnectors.Contains(conn.Id) ? "inline-block" : "none")"
                                    @onclick="@(() => SaveConnector(conn))">
                                Save Connector
                            </button>
                            }
                            else
                            {
                                <button class="btn discover-tools-btn"
                                        @onclick="@(() => DiscoverTools(conn))">
                                    Connect
                                </button>
                              
                            }
                        



                    </div>
                }

                <button class="btn btn-sm btn-outline-primary add-connector-btn"
                        @onclick="AddConnector">
                    Add Connector
                </button>
            </dl>
        </section>

             <section>
            <h4><i class="fi fi-br-lock"></i><span class="header-text-1">Non-Configurable</span></h4>
            <dl class="text-secondary small">
               
              
                <dt>
                    <i class="fi fi-br-info me-1 fs-6 align-text-bottom text-muted"
                       title="Tools built in and configured with this model"></i>
                    Tools
                </dt>
                <dd id="tools-options-cont">
                    @foreach (var tool in AssistantConfig.AssistantModel.Tools ?? Enumerable.Empty<AITool>())
                    {
                        <div class="badge badge-1">@tool.Name</div>
                    }
                </dd>
                @*<dt>
                    <i class="fi fi-br-info me-1 fs-6 align-text-bottom text-muted"
                       title="Sequences at which the model will stop generating"></i>
                    Stop Sequences
                </dt>
                <dd>@string.Join(", ", AssistantConfig.AssistantModel.StopSequences ?? Array.Empty<string>())</dd>*@

               
            </dl>
        </section>
        <section id="wipe">
            <button class="wipe-btn"
                    @onclick="@(() => WipeVectorStores())">
                Delete Vector Stores
            </button>
        </section>
    </aside>
}

@code {
    //so to implement saving here. we do the seperate structure
    [Parameter]
    public AssistantConfig AssistantConfig { get; set; } = new();

    private Dictionary<DatabaseConfiguration, DatabaseConfiguration> lastSaved = new();
    [Parameter]
    public EventCallback OnStateChange { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }
    private HashSet<string> editedDatabases = new();
    //private ChatOptions ChatOptions => ModelConfig.ChatOptions;
    private bool showSidebar = true;
    private HashSet<string> _expanded = new();
    private void ToggleSidebar()
    {
        showSidebar = !showSidebar;
    }

    private HashSet<string> editedConnectors = new();
    private Dictionary<string, List<string>> connectorTools = new();
    // conn.Id -> tool name list


    private void AddConnector()
    {
        AssistantConfig.McpConnectors ??= new();
        var cfg = new McpConnectorConfig
        {
            Id = "New Connector",
            ServerUrl = "http://localhost:4001"
        };
        AssistantConfig.McpConnectors.Add(cfg);
        editedConnectors.Add(cfg.Id);
    }

    private void RemoveConnector(McpConnectorConfig conn)
    {
        AssistantConfig.McpConnectors.Remove(conn);
        McpRegistry.Remove(conn.Id);
        connectorTools.Remove(conn.Id);
        clientState.StatusMessage($"Connector {conn.Id} removed.");
    }

    private async Task DiscoverTools(McpConnectorConfig conn)
    {
        try
        {
            var reg = await McpRegistry.RegisterAsync(conn);

            var toolNames = reg.Tools
                .Select(t => t.Name)
                .Distinct()
                .OrderBy(x => x)
                .ToList();

            connectorTools[conn.Id] = toolNames;

            // if user hasn't manually chosen anything yet,
            // auto-enable everything we just discovered
            if (conn.EnabledTools == null)
            {
                conn.EnabledTools = new List<string>();
            }

            if (conn.EnabledTools.Count == 0)
            {
                conn.EnabledTools.AddRange(toolNames);
            }

            editedConnectors.Add(conn.Id);
            clientState.StatusMessage(
                $"Connected to {conn.Id}. {toolNames.Count} tools available, all enabled.");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            clientState.StatusMessage($"Failed to connect: {ex.Message}");
        }
    }


    private void ToggleToolAllowed(McpConnectorConfig conn, string toolName, bool on)
    {
        if (on)
        {
            if (!conn.EnabledTools.Contains(toolName))
                conn.EnabledTools.Add(toolName);
        }
        else
        {
            conn.EnabledTools.Remove(toolName);
        }

        editedConnectors.Add(conn.Id);
    }
    private HashSet<string> editingConnectors = new();

    private void ToggleConnectorEdit(McpConnectorConfig conn)
    {
        // toggle conn.Id in the editing set
        if (!editingConnectors.Add(conn.Id))
            editingConnectors.Remove(conn.Id);
    }

    private bool IsEditing(McpConnectorConfig conn)
        => editingConnectors.Contains(conn.Id);


    private void SaveConnector(McpConnectorConfig conn)
    {
        // "Save" here just means mark clean in UI.
        editedConnectors.Remove(conn.Id);
        clientState.RefreshTools();
        clientState.StatusMessage($"Connector {conn.Id} saved.");
    }

    private string? _originalId;

    protected override void OnInitialized()
    {
        if (AssistantConfig?.Databases != null)
        {
            foreach (var db in AssistantConfig.Databases)
            {
                if (!lastSaved.ContainsKey(db))
                {
                    lastSaved[db] = db.Clone();
                }
            }
        }
    }// initialize original id once the parameter arrives
    protected override void OnParametersSet()
    {
        if (string.IsNullOrWhiteSpace(_originalId) && !string.IsNullOrWhiteSpace(AssistantConfig?.Id))
            _originalId = AssistantConfig.Id;

        // existing init you already have...
        if (AssistantConfig?.Databases != null)
        {
            foreach (var db in AssistantConfig.Databases)
                if (!lastSaved.ContainsKey(db)) lastSaved[db] = db.Clone();
        }
    }


    bool isSaving;
    private async Task SaveChatOptions()
    {
        try
        {
            AssistantConfig.Name = AssistantConfig.Id;  
            isSaving = true;
            await ConfigStore.UpdateAsync(_originalId!, AssistantConfig);
            _originalId = AssistantConfig.Id;
            clientState.StatusMessage("Model saved successfully");
            await OnStateChange.InvokeAsync(); 
        }catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
            Console.WriteLine(ex.StackTrace);
        }
        finally
        {
            isSaving = false;
        }
    }private void EnsureProviderUrl()
{
    if (string.IsNullOrWhiteSpace(AssistantConfig.ModelProviderUrl))
        AssistantConfig.ModelProviderUrl = "http://localhost:11434";
}
    private void AddFolder()
    {
        AssistantConfig.IngestionPaths ??= new();
        AssistantConfig.IngestionPaths.Add(new IngestionSourceFolder());
    }
    private bool IsValidConnectionString(string connectionString)
    {
        try
        {
            using var conn = new SqlConnection(connectionString);
            conn.Open();
            return true;
        }
        catch
        {
            return false;
        }
    }
    private void ReingestDatabase()
    {

    }
    private async Task WipeVectorStores()
    {
        await clientState.RecreateAndReingestAsync();
    }
    private async Task ReingestDatabases()
    {
        await clientState.ReingestDatabases();
    }

    private async Task ReingestDocuments()
    {
        clientState.StatusMessage($"Starting Reingestion. Save model file to persist knowledge upon reload.");
        await clientState.ReingestDocuments();
    }
    private void SaveDatabase(DatabaseConfiguration dbConfig)
    {
        if (string.IsNullOrWhiteSpace(dbConfig.ConnectionString))
        {
            clientState.StatusMessage($"Skipping save: {dbConfig.Id} has no connection string.");
            return;
        }

        if (!IsValidConnectionString(dbConfig.ConnectionString))
        {
            clientState.StatusMessage($"Invalid connection string for {dbConfig.Id}");
            return;
        }
        editedDatabases.Remove(dbConfig.Id);
        // detect rename: lookup by the live object key
        if (lastSaved.TryGetValue(dbConfig, out var oldSnapshot) &&
            oldSnapshot.Id != dbConfig.Id)
        {
            DbRegistry.Remove(oldSnapshot.Id);
            clientState.StatusMessage($"Database renamed from {oldSnapshot.Id} → {dbConfig.Id}");
        }

        bool exists = DbRegistry.Get(dbConfig.Id) is not null;

        lastSaved[dbConfig] = dbConfig.Clone();
        DbRegistry.Register(dbConfig);

        clientState.StatusMessage(
            exists
                ? $"Database {dbConfig.Id} updated successfully."
                : $"Database {dbConfig.Id} registered successfully."
        );
    }


    void AddDatabase()
    {
        var config = new DatabaseConfiguration
        {
            Id = "New Database",
            DatabaseConsiderations = "When querying the database, take into account that..."
        };
        AssistantConfig.Databases.Add(config);
    }

    void RemoveDatabase(DatabaseConfiguration db)
    {
        // remove from model
        AssistantConfig.Databases.Remove(db);

        // remove from registry (by current Id if still valid)
        if (!string.IsNullOrWhiteSpace(db.Id))
        {
            DbRegistry.Remove(db.Id);
        }

        // remove from lastSaved snapshot by object reference
        if (lastSaved.TryGetValue(db, out var snapshot))
        {
            // also remove the old Id if it differs
            if (!string.IsNullOrWhiteSpace(snapshot.Id) && snapshot.Id != db.Id)
            {
                DbRegistry.Remove(snapshot.Id);
            }

            lastSaved.Remove(db);
        }

        clientState.StatusMessage($"Database {db.Id} removed.");
    }
    private void RemoveFolder(IngestionSourceFolder folder)
    {
        AssistantConfig.IngestionPaths.Remove(folder);
    }
   


    private string GetExtensionsString(IngestionSourceFolder folder)
    {
        return folder.FileExtensions == null ? "" : string.Join(",", folder.FileExtensions);
    }
    private void ToggleModel(string key)
    {
        if (!_expanded.Add(key))
            _expanded.Remove(key);
    }
    private void SetExtensions(IngestionSourceFolder folder, string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            folder.FileExtensions = null;
        }
        else
        {
            folder.FileExtensions = value.Split(',')
                .Select(e => e.Trim())
                .Where(e => !string.IsNullOrWhiteSpace(e))
                .ToList();
        }
    }

}
